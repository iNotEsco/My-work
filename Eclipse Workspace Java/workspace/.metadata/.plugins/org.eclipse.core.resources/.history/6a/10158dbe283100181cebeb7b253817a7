package assg7_Escobar;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.*;


public class FlightMap implements FlightMapInterface {


	private ArrayList<LinkedList<City>> flightMap;
	/**
	 * Creates an empty FlightMap
	 */
	public FlightMap() {
		flightMap = new ArrayList<LinkedList<City>>();
	}
	
	
	public void loadFlightMap(String cityFileName, String flightFileName)
			throws FileNotFoundException {
		Scanner cityFile = null;
		Scanner flightFile = null;
		try {
			cityFile = new Scanner(new File(cityFileName));
			flightFile = new Scanner(new File(flightFileName));
		} catch (FileNotFoundException e) {
			System.out.println("ERROR: Can not open " + cityFileName + " or " +
								flightFileName + " for reading.");
			System.exit(1);
		}
		
		while(cityFile.hasNextLine()){
			LinkedList<City> temp = new LinkedList<City>();
			temp.add(new City(cityFile.nextLine()));
			flightMap.add(temp);
			}
		cityFile.close();
		
		while(flightFile.hasNextLine()){
			String[] parts = flightFile.nextLine().split("\\s+");
			insertAdjacent(new City(parts[0]),new City(parts[1]));
			
		}
		flightFile.close();
		
	}


	public void insertAdjacent(City aCity, City adjCity) {
		Iterator<LinkedList<City>> iter = flightMap.iterator();
		while(iter.hasNext()){
			LinkedList<City> tempList = iter.next();
			City tempCity = tempList.element();
			if(tempCity.getName().equals(aCity.getName())){
				tempList.add(adjCity);
				break;
			}
			
		}
	}

	
	public void displayFlightMap() {
		Iterator<LinkedList<City>> iter = flightMap.iterator();
		while(iter.hasNext()){
			displayAdjacentCities(iter.next().element());
		}
	}

	
	public void displayAllCities() {
		
	}

	
	public void displayAdjacentCities(City aCity) {
		Iterator<LinkedList<City>> iter = flightMap.iterator();
		while(iter.hasNext()){
			LinkedList<City> tempList = iter.next();
			City tempCity = tempList.element();
			if(tempCity.getName().equals(aCity.getName())){
				Iterator<City> tempI = tempList.iterator();
				if(tempI.hasNext()){
					System.out.print("Origin City: " + tempI.next() + "\t\tServes: ");
				}
				while(tempI.hasNext()){
				System.out.print(tempI.next());
				if(tempI.hasNext()){
					System.out.print(", ");
				}
				}
				System.out.print("\n");
			}
			
		}
		
	}

	
	public void markVisited(City aCity) {
	}

	
	public void unVisitAll() {		
	}


	public boolean isVisited(City aCity) {
		return false;
	}

	
	public City getNextCity(City aCity) {
		return null;
	}

	
	public boolean servesCity(City aCity) {
		return false;
	}


	public LinkedList<City> getPath(City originCity, City destinationCity) {
		Stack<City> path = new Stack<City>();
		path.push(originCity);
		return null;
	}

}
